    /*@PostMapping(value = "/addComponents/{proposalId}", consumes = "application/json", produces = "application/json")
    public ResponseEntity<HttpStatus> addComponents(@PathVariable long proposalId, @RequestBody ComponentList componentList){
        Proposal prop = proposalService.fetchProposalById(proposalId);
        componentList.getComponentList().stream().forEach(prop::addComponent);
        proposalService.updateProposal(proposalId, prop);
        //Logic for checking for a proposal no component should come twice.
        return ResponseEntity.ok(HttpStatus.CREATED);
    }*/

    /*@PostMapping(value = "/addProject/{componentId}", consumes = "application/json", produces = "application/json")
        public ResponseEntity<HttpStatus> addProjecct(@PathVariable long componentId, @RequestBody ProjectList projectList){
            Component comp = componentService.fetchComponentById(componentId);
            projectList.getProjectList()
                    .stream()
                    .forEach(project -> {
                            comp.addProject(project);
                            projectService.addProject(project);
                            }
                    );
            // Logic for checking that only SWM should have these projects.
            // Logic for checking only Disposal should have the Subtypes [i.e. Dumpsite Remediation, Other, and Landfill].
            return ResponseEntity.ok(HttpStatus.CREATED);
        }*/